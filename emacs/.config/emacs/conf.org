#+OPTIONS: toc:2

* Hotkeys

Evil allows to use vim-like commands to interact with emacs

#+BEGIN_SRC emacs-lisp
	(use-package evil
		:ensure t
		:config
		(evil-mode t))
#+END_SRC

Treemacs is a file viewer similar to those of other IDEs, useful sometimes.

#+BEGIN_SRC emacs-lisp
	(use-package treemacs
		:ensure t)

	(use-package treemacs-evil
		:after 'treemacs
		:ensure t)

	(use-package treemacs-projectile
		:after 'treemacs
		:ensure t)
#+END_SRC

General is the use-package of keybindings, but I mostly use it to mimic vim's leader
keys in emacs.

#+BEGIN_SRC emacs-lisp
	(use-package general
		:ensure t
		:config
		(general-create-definer nf-main-leader-def :prefix ";"))

	(nf-main-leader-def
		:keymaps 'normal
		"q"          #'kill-this-buffer
		"pf"         #'projectile-find-file
		"pp"         #'projectile-switch-project
		"psp"        #'projectile-grep
		"psr"        #'projectile-find-references
		"Pr"         #'package-refresh-contents
		"ce"         #'lsp-execute-code-action
		"cd"         #'lsp-ui-doc-glance
		"cD"         #'lsp-describe-thing-at-point
		"csd"        #'lsp-find-definition
		"csr"        #'lsp-find-references
		"csR"        #'lsp-rename
		"cxb"        #'xref-go-back
		"cxf"        #'xref-go-forward
		"er"         '(lambda ()
				(interactive)
				(load-file (concat user-emacs-directory "init.el")))
		"of"         #'org-roam-node-find
		"oi"         #'org-roam-node-insert
		"oc"         #'org-roam-capture)
#+END_SRC

which-key offers a menu of the existing keybindings after a particular input

#+BEGIN_SRC emacs-lisp
	(use-package which-key
		:ensure t
		:config
		(which-key-mode)
		(which-key-add-key-based-replacements
			"; e"   "emacs"
			"; er"  "reload configuration"
			"; c"   "code"
			"; ce"  "execute action"
			"; cd"  "describe"
			"; cD"  "describe better"
			"; cx"  "navigation"
			"; cxb" "back"
			"; cxf" "forward"
			"; cs"  "symbols"
			"; csd" "find definition"
			"; csr" "find references"
			"; csR" "rename"
			"; p"   "project"
			"; pf"  "find file"
			"; pp"  "switch project"
			"; ps"  "search"
			"; psp" "find"
			"; psr" "find references"
			"; P"   "packages"
			"; Pr"  "refresh registry"
			"; o"   "org-roam"
			"; of"  "find"
			"; oi"  "insert"
			"; oc"  "capture"
			"; q"   "kill this buffer"))
#+END_SRC

* Defaults

** Base

Disable all the toolbars that come with emacs by default

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode   -1)
  (menu-bar-mode   -1)
  (scroll-bar-mode -1)

  ;; disable the initial "GNU emacs" buffer
  (setq inhibit-startup-screen t)
#+END_SRC

Disables the default bell from using both visual and sound cues

#+BEGIN_SRC emacs-lisp
  (setq visible-bell       nil
	ring-bell-function #'ignore)
#+END_SRC

Display relative line numbers to the left of all buffers

#+BEGIN_SRC emacs-lisp
	(global-display-line-numbers-mode t)
	(setq display-line-numbers-type 'relative)
#+END_SRC

Keybinds to move around panels.

#+BEGIN_SRC emacs-lisp
  ;; after org since org uses M-h and my keybind
  ;; was being replaced.
  (with-eval-after-load "org"
    (global-set-key (kbd "M-h") #'windmove-left)
    (global-set-key (kbd "M-j") #'windmove-down)
    (global-set-key (kbd "M-k") #'windmove-up)
    (global-set-key (kbd "M-l") #'windmove-right))
#+END_SRC

Tabbing stuff

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
	(defcustom nf-theme-scheme 'dark
		"color scheme to use when loading the UI theme")

	(defcustom nf-theme-light-name 'ef-deuteranopia-light
		"UI theme to use for the light scheme")

	(defcustom nf-theme-dark-name 'ef-dark
		"UI theme to use for the dark scheme")

	(defun nf-switch-theme ()
		(interactive)
		(nf-toggle-theme-scheme)
		(nf-set-theme))

	(defun nf-toggle-theme-scheme ()
		(if (eq nf-theme-scheme 'dark)
	(customize-set-variable 'nf-theme-scheme 'light)
			(customize-set-variable 'nf-theme-scheme 'dark)))

	(defun nf-set-theme ()
		(if (eq nf-theme-scheme 'dark)
	(progn
		(disable-theme nf-theme-light-name)
		(load-theme    nf-theme-dark-name t))
	(progn (disable-theme nf-theme-dark-name)
				 (load-theme    nf-theme-light-name t))))

	(use-package ef-themes
		:ensure t
		:config
		(nf-set-theme))
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (when-let* ((font (find-font (font-spec :name "Source Code Pro"))))
    (set-frame-font font nil t)
    (set-face-attribute 'default nil :height 110 :weight 'medium))

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :hook (after-init . doom-modeline-mode)
  ;;   :custom
  ;;   (doom-modeline-height 35))

  ;; (use-package awesome-tray
  ;;   :load-path "./lib/awesome-tray/"
  ;;   :config
  ;;   (awesome-tray-mode 1))

  ;; Enable a little clock in the modeline
  (display-time-mode)
#+END_SRC

** Completion System

#+BEGIN_SRC emacs-lisp
	(use-package vertico
		:ensure t
		:init (vertico-mode))

	(use-package marginalia
		:ensure t
		:init (marginalia-mode))

	(use-package orderless
		:ensure t
		:custom
		(completion-styles '(orderless basic))
		(completion-category-overrides '((file (styles basic partial-completion)))))

	(use-package consult
		:ensure t)

	(use-package embark
		:ensure t)

	(use-package embark-consult
		:ensure t
		:hook
		(embark-collect-mode . consult-preview-at-point-mode))

	(use-package yasnippet
		:ensure t
		:config
		(setq yas-snippet-dirs (list (expand-file-name (concat user-emacs-directory "snippets"))))
		(yas-global-mode))
#+END_SRC

** Transparency

#+BEGIN_SRC emacs-lisp
	(defun nf-toggle-window-transparency ()
		"Toggle transparency."
		(interactive)
		(let ((alpha-transparency 50))
			(pcase (frame-parameter nil 'alpha-background)
				(alpha-transparency (set-frame-parameter nil 'alpha-background 100))
				(t (set-frame-parameter nil 'alpha-background alpha-transparency)))))
#+END_SRC

* Langs

** LSP

#+BEGIN_SRC emacs-lisp
	(use-package lsp-mode
		:ensure t
		:hook
		((typescript-ts-mode rust-mode go-mode haskell-mode
			haskell-literate-mode c-ts-mode c++-ts-mode terraform-mode) . lsp-deferred)
		:config
		(setq lsp-log-io nil)
		(setq gc-cons-threshold 100000000)
		(setq read-process-output-max (* 1024 1024)) ;; 1 mb
		(setq lsp-auto-execute-action nil))

	(use-package lsp-ui
		:ensure t
		:config
		(add-hook 'lsp-ui-doc-frame-mode-hook
				#'(lambda () (display-line-numbers-mode -1))))

	(defun lsp-pre-save-hooks ()
		(add-hook 'before-save-hook #'lsp-format-buffer t t)
		(add-hook 'before-save-hook #'lsp-organize-imports t t))

	(add-hook 'c-ts-mode-hook #'lsp-pre-save-hooks)
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
	(setq
	 indent-tabs-mode nil
	 c-default-style "linux"
	 c-basic-offset 4)
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
	(use-package go-mode
		:ensure t
		:mode "\\.go\\'"
		:config
		(add-hook 'go-mode-hook #'lsp-pre-save-hooks))

	;;(use-package go-ts-mode
	;;	:ensure t
	;;	:mode "\\.go\\'"
	;;	:config
	;;	(add-hook 'go-ts-mode-hook #'lsp-pre-save-hooks))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
	(use-package company
		:ensure t
		:bind (:map company-active-map
								("<tab>" . #'company-complete-common-or-cycle)
								("S-<iso-lefttab>" . (lambda () (interactive) (company-complete-common-or-cycle -1))))
		:config
		(add-hook 'after-init-hook #'global-company-mode))

	(use-package flycheck
		:ensure t
		:init
		(setq rustic-treesitter-derive t)
		:config
		(add-hook 'after-init-hook #'global-flycheck-mode))

	(use-package rustic
		:ensure t
		:config
		(add-hook 'rustic-mode-hook #'lsp-pre-save-hooks)
		(add-hook 'flycheck-mode-hook #'rustic-flycheck-setup))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package lsp-haskell
    :ensure t)
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
	(use-package tuareg
		:ensure t)

	(use-package ocamlformat
		:ensure t
		:custom (ocamlformat-enable 'enable-outside-detected-project)
		:hook (before-save . ocamlformat-before-save))
#+END_SRC

** Beancount

#+BEGIN_SRC emacs-lisp
  (use-package beancount
    :load-path "./lib/beancount-mode/")
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
	(use-package typescript-ts-mode
		:after lsp-mode
		:mode ("\.ts$")
		:hook (typescript-ts-mode . lsp-deferred))
#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp
	(use-package terraform-mode
		:ensure t)
#+END_SRC

* Notes

Generic org-mode customizations

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC

Set up org-roam as a replacement to obsidian, which acts as a
connection of notes in circular fashion.

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :config
    (make-directory (concat (getenv "HOME") "/cloud/secrets/records") t)
    (setq org-roam-directory (file-truename (concat (getenv "HOME") "/cloud/secrets/records")))
    (org-roam-db-autosync-mode))

  (use-package org-roam-ui
    :after org-roam
    :ensure t
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+END_SRC

Add pomodoro mode similar to org-clock-in

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t)
#+END_SRC

Set up org-agenda to manage tasks and schedules

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/cloud/secrets/journal"))

  (setq org-agenda-custom-commands
	'(

	  ("D" "block agenda"
	   (

	    (tags-todo "*"
		       ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
			(org-agenda-skip-function
			 `(org-agenda-skip-entry-if
			   'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
			(org-agenda-block-separator nil)
			(org-agenda-overriding-header "Important tasks without a date\n")))

	    (todo "WAIT"
		  ((org-agenda-block-separator nil)
		   (org-agenda-overriding-header "\nTasks on hold\n")))

	    (agenda ""
		    ((org-agenda-block-separator nil)
		     (org-agenda-span 1)
		     (org-deadline-warning-days 0)
		     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		     (org-agenda-overriding-header "\nDaily agenda\n")))

	    (agenda ""
		    ((org-agenda-block-separator nil)
		     (org-agenda-start-day "+1d")
		     (org-agenda-span 3)
		     (org-deadline-warning-days 0)
		     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		     (org-agenda-skip-function `(org-agenda-skip-entry-if 'todo 'done))
		     (org-agenda-overriding-header "\nNext three days\n")))))

	  ))
#+End_SRC

* Others

** Source code improvements

*** Treesit

#+BEGIN_SRC emacs-lisp
	(use-package treesit-auto
		:ensure t
		:config
		(global-treesit-auto-mode)
		(setq treesit-auto-install 'prompt))
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1))
#+END_SRC

*** Highlight TODO comments

#+BEGIN_SRC emacs-lisp
	(use-package fic-mode
		:load-path "./lib/fic-mode/"
		:config
		(fic-mode 1))
#+END_SRC

** RSS feed

#+BEGIN_SRC emacs-lisp
	(use-package elfeed
		:ensure t
		:config
		(setq elfeed-feeds
					'(("https://www.youtube.com/feeds/videos.xml?channel_id=UCf93u-RFP3nitjOL-30kp1w" videos)
						"https://xeiaso.net/blog.rss"
						"https://deprogrammaticaipsum.com/rss"
						"https://lwn.net/headlines/rss"
						"https://hnrss.org/frontpage"
						("https://github.com/beancount/beancount/tags.atom" pkg)
						("https://github.com/hashicorp/terraform-ls/releases.atom" pkg)
						("https://github.com/acmesh-official/acme.sh/releases.atom" pkg)
						("https://github.com/bugaevc/wl-clipboard.atom" pkg)
						("https://github.com/golang/tools/releases.toml" pkg)
						("https://github.com/AmatCoder/mednaffe/releases.toml" pkg))))
#+END_SRC

** Backups

For the backups policy, let's configure it to store them at an specific
directory and store different versions of the changes.

As documented in emacswiki ([[https://www.emacswiki.org/emacs/AutoSave#toc7][here]]), only the focused buffer is saved by
default, so with 'save-all' we are able to save all of them even if we
switched from one to another before it was saved.

#+BEGIN_SRC emacs-lisp
  (setq
   ; save every 20 characters
   auto-save-interval 20
   ; save after 15 seconds if stop typing
   auto-save-timeout 15
   ; copy files instead of renaming them
   backup-by-copying t
   ; newest backups to keep
   kept-new-versions 10
   ; oldest backups to keep, anything between the newest and oldest will
   ; be deletec
   kept-old-versions 10
   ; don't ask before deleting backup files
   delete-old-versions t
   ; use version numbers for backups
   version-control t
   ; backup files even in a project with version-control
   vc-make-backup-files t
   ; where to store backups
   backup-directory-alist `((".*" . "~/tmp/ebackup/")))

  ; save the file directly instead of saving it in an #auto-save# file
  (add-hook 'after-init-hook #'auto-save-visited-mode)

  (defun save-all ()
    "Save all the buffers silently."
    (interactive)
    (save-some-buffers t))

  ; save them each time you change between buffers
  (add-hook 'focus-out-hook #'save-all)
#+END_SRC
